#!/usr/bin/env python
#coding=UTF-8

from __future__ import print_function, unicode_literals
from re import compile
from os import sep
from os.path import exists
from sys import argv, version_info

def process_rds(filename):
    (major, minor, micro, release, serial) = version_info

    def open_fh(fn):
        if major == 2:
            return open(fn, "r")
        else:
            return open(fn, "r", errors="replace", encoding="ISO-8859-1")

    def unicodify(line):
        if major == 2:
            return unicode(line, errors="replace", encoding="ISO-8859-1")
        else:
            return line

    try:
        with open_fh(filename) as fh:
            with open(sep.join(["@pkgdatadir@", "hashes.txt"]), "w") as out:
                md5re = compile(r'^"?([A-F0-9]{32})"?$')            
                line = unicodify(fh.readline())
                while line:
                    cols = line.split(",")
                    if len(cols) > 2:
                        match = md5re.match(cols[1])
                        if match:
                            md5 = match.group(1) + "\n"
                            out.write(md5.encode("ASCII"))
                    line = unicodify(fh.readline())
        
    except IOError as e:
        print("I/O error while trying to process " + filename)
        print(
"""(This is normally caused by one of two things: either you're out of disk
space, or you lack privileges to write to @pkgdatadir@/hashes.txt file.)""")

if __name__=='__main__':
    if len(argv) != 2 or not exists(argv[1]):
        print("Usage: nsrlupdate <path-to-NSRLFile.txt>")
    else:
        process_rds(argv[1])
