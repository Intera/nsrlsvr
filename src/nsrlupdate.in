#!/usr/bin/env python
#coding=UTF-8

from __future__ import print_function

import sys
import re
import os
import tempfile
from zipfile import ZipFile


def make_processor():

    class RDSNotFoundException(Exception):
        def __init__(self):
            Exception.__init__(self)
        def __str__(self):
            return "Could not find RDS"

    md5re = re.compile(r'^"?([A-F0-9]{32})"?$')

    def process_rds(filename):
        try:
            with ZipFile(filename, 'r', allowZip64=True) as zf:
                if "minimal/NSRLFile.txt" not in zf.namelist():
                    raise RDSNotFoundException()
                zf.extract("minimal/NSRLFile.txt", tempfile.gettempdir())
            fn = tempfile.gettempdir() + os.sep + "minimal" +\
                os.sep + "NSRLFile.txt"
            with open(fn, "r") as fh:
                with open("@pkgdatadir@" + os.sep + "NSRLFile.txt", "w") as output:
                    hashcount = 0
                    line = fh.readline()
                    while line:
                        cols = line.split(",")
                        if len(cols) > 2:
                            match = md5re.match(cols[1])
                            if match:
                                hashcount += 1
                                row = match.group(1) + "\n"
                                output.write(row.encode("UTF-8"))
                        line = fh.readline()
        except IOError as e:
            print("I/O error while trying to process " + filename)
        except RDSNotFoundException as rnfe:
            print("Could not find minimal/NSRLFile.txt within the zip file")
    return process_rds

process_rds = make_processor()
del make_processor

if __name__=='__main__':
    if len(sys.argv) != 2 or not os.path.exists(sys.argv[1]):
        print("Usage: nsrlupdate <path-to-rds_XXX.zip>")
    process_rds(sys.argv[1])

